#pragma checksum "C:\Projekti\Wiener\InsuranceApp\InsuranceApp\Views\Partners\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "8df2031a2f0456407b01fd3c9b349468355c0c4b"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Partners_Index), @"mvc.1.0.view", @"/Views/Partners/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Projekti\Wiener\InsuranceApp\InsuranceApp\Views\_ViewImports.cshtml"
using InsuranceApp;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Projekti\Wiener\InsuranceApp\InsuranceApp\Views\_ViewImports.cshtml"
using InsuranceApp.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"8df2031a2f0456407b01fd3c9b349468355c0c4b", @"/Views/Partners/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"a5880d2cb7ea48fbcb354448950591158076ff49", @"/Views/_ViewImports.cshtml")]
    public class Views_Partners_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<IEnumerable<InsuranceApp.Models.Partner>>
    {
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 3 "C:\Projekti\Wiener\InsuranceApp\InsuranceApp\Views\Partners\Index.cshtml"
  
    ViewData["Title"] = "Lista Partnera";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "8df2031a2f0456407b01fd3c9b349468355c0c4b3334", async() => {
                WriteLiteral("\r\n    <meta charset=\"UTF-8\">\r\n    <!-- Ostali metatags, linkovi na CSS, JS, itd. -->\r\n");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n<div class=\"container mt-4\">\r\n    <h2>");
#nullable restore
#line 13 "C:\Projekti\Wiener\InsuranceApp\InsuranceApp\Views\Partners\Index.cshtml"
   Write(ViewData["Title"]);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"</h2>
    <button class=""btn btn-primary mb-3"" onclick=""window.location.href='/Partners/Create'"">Dodaj Partnera</button>

    <table class=""table table-striped table-hover"">
        <thead>
            <tr>
                <th>Full Name</th>
                <th>Partner Number</th>
                <th>Partner Type</th>
                <th>Created At</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody id=""partnerListBody"">
");
#nullable restore
#line 27 "C:\Projekti\Wiener\InsuranceApp\InsuranceApp\Views\Partners\Index.cshtml"
             foreach (var partner in Model)
            {

#line default
#line hidden
#nullable disable
            WriteLiteral("                <tr data-partner-id=\"");
#nullable restore
#line 29 "C:\Projekti\Wiener\InsuranceApp\InsuranceApp\Views\Partners\Index.cshtml"
                                Write(partner.Id);

#line default
#line hidden
#nullable disable
            WriteLiteral("\"");
            BeginWriteAttribute("class", " class=\"", 846, "\"", 924, 1);
#nullable restore
#line 29 "C:\Projekti\Wiener\InsuranceApp\InsuranceApp\Views\Partners\Index.cshtml"
WriteAttributeValue("", 854, partner.Id == (int)ViewData["NewestPartnerId"] ? "new-partner" : "", 854, 70, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(" style=\"cursor: pointer;\"");
            BeginWriteAttribute("onclick", " onclick=\"", 950, "\"", 989, 3);
            WriteAttributeValue("", 960, "showDetailsModal(", 960, 17, true);
#nullable restore
#line 29 "C:\Projekti\Wiener\InsuranceApp\InsuranceApp\Views\Partners\Index.cshtml"
WriteAttributeValue("", 977, partner.Id, 977, 11, false);

#line default
#line hidden
#nullable disable
            WriteAttributeValue("", 988, ")", 988, 1, true);
            EndWriteAttribute();
            WriteLiteral(">\r\n                    <td>\r\n                        ");
#nullable restore
#line 31 "C:\Projekti\Wiener\InsuranceApp\InsuranceApp\Views\Partners\Index.cshtml"
                    Write(partner.TotalPolicies > 5 || partner.TotalAmount > 5000
                            ? "*" + partner.FirstName + " " + partner.LastName
                            : partner.FirstName + " " + partner.LastName);

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n                    </td>\r\n                    <td>");
#nullable restore
#line 35 "C:\Projekti\Wiener\InsuranceApp\InsuranceApp\Views\Partners\Index.cshtml"
                   Write(partner.PartnerNumber);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                    <td>");
#nullable restore
#line 36 "C:\Projekti\Wiener\InsuranceApp\InsuranceApp\Views\Partners\Index.cshtml"
                    Write(partner.PartnerTypeId == 1 ? "Personal" : "Legal");

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                    <td>");
#nullable restore
#line 37 "C:\Projekti\Wiener\InsuranceApp\InsuranceApp\Views\Partners\Index.cshtml"
                   Write(partner.CreatedAtUtc.ToString("yyyy-MM-dd HH:mm"));

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                    <td>\r\n                        <button class=\"btn btn-info btn-sm\"");
            BeginWriteAttribute("onclick", " onclick=\"", 1586, "\"", 1651, 4);
            WriteAttributeValue("", 1596, "event.stopPropagation();", 1596, 24, true);
            WriteAttributeValue(" ", 1620, "openPolicyDialog(", 1621, 18, true);
#nullable restore
#line 39 "C:\Projekti\Wiener\InsuranceApp\InsuranceApp\Views\Partners\Index.cshtml"
WriteAttributeValue("", 1638, partner.Id, 1638, 11, false);

#line default
#line hidden
#nullable disable
            WriteAttributeValue("", 1649, ");", 1649, 2, true);
            EndWriteAttribute();
            WriteLiteral(">Dodaj Policu</button>\r\n                    </td>\r\n                </tr>\r\n");
#nullable restore
#line 42 "C:\Projekti\Wiener\InsuranceApp\InsuranceApp\Views\Partners\Index.cshtml"
            }

#line default
#line hidden
#nullable disable
            WriteLiteral(@"        </tbody>
    </table>
</div>

<!-- Modal za unos police -->
<div class=""modal fade"" id=""policyModal"" tabindex=""-1"" role=""dialog"" aria-hidden=""true"">
    <div class=""modal-dialog"" role=""document"">
        <div class=""modal-content"">
            <div class=""modal-header"">
                <h5 class=""modal-title"">Unos Detalja Police</h5>
                <button type=""button"" class=""close"" data-dismiss=""modal"" aria-label=""Zatvori"">
                    <span aria-hidden=""true"">&times;</span>
                </button>
            </div>
            <div class=""modal-body"">
                <div class=""form-group"">
                    <label for=""policyNumber"">Broj Police:</label>
                    <input type=""text"" class=""form-control"" id=""policyNumber"" placeholder=""Unesite broj police"" required>
                    <div id=""policyNumberError"" class=""text-danger mt-2"" style=""display: none;""></div>
                </div>
                <div class=""form-group"">
                    <labe");
            WriteLiteral(@"l for=""policyAmount"">Iznos Police:</label>
                    <input type=""number"" class=""form-control"" id=""policyAmount"" placeholder=""Unesite iznos police"" step=""0.01"" required>
                    <div id=""policyAmountError"" class=""text-danger mt-2"" style=""display: none;""></div>
                </div>
            </div>
            <div class=""modal-footer"">
                <button type=""button"" class=""btn btn-secondary"" data-dismiss=""modal"">Zatvori</button>
                <button type=""button"" class=""btn btn-primary"" onclick=""savePolicy()"">Spremi Policu</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal za detalje partnera -->
<div class=""modal fade"" id=""detailsModal"" tabindex=""-1"" role=""dialog"" aria-hidden=""true"">
    <div class=""modal-dialog"" role=""document"">
        <div class=""modal-content"">
            <div class=""modal-header"">
                <h5 class=""modal-title"">Detalji Partnera</h5>
                <button type=""button"" class=""close"" data-dismiss=""mod");
            WriteLiteral(@"al"" aria-label=""Close"">
                    <span aria-hidden=""true"">&times;</span>
                </button>
            </div>
            <div class=""modal-body"">
                <p><strong>Ime:</strong> <span id=""modalFullName""></span></p>
                <p><strong>Adresa:</strong> <span id=""modalAddress""></span></p>
                <p><strong>Kreirao:</strong> <span id=""modalCreatedBy""></span></p>
                <p><strong>Vanjski kod:</strong> <span id=""modalExternalCode""></span></p>
                <p><strong>Spol:</strong> <span id=""modalGender""></span></p>
                <p><strong>Strani partner:</strong> <span id=""modalIsForeign""></span></p>
                <p><strong>OIB:</strong> <span id=""modalCroatianPIN""></span></p>
                <p><strong>Datum kreiranja:</strong> <span id=""modalCreatedAt""></span></p>
            </div>
            <div class=""modal-footer"">
                <button type=""button"" class=""btn btn-secondary"" data-dismiss=""modal"">Zatvori</button>
            ");
            WriteLiteral(@"</div>
        </div>
    </div>
</div>

<script>
    function showDetailsModal(partnerId) {
        fetch(`/api/partners/${partnerId}`)
            .then(response => response.json())
            .then(data => {
                document.getElementById('modalFullName').textContent = `${data.firstName} ${data.lastName}`;
                document.getElementById('modalAddress').textContent = data.address || ""N/A"";
                document.getElementById('modalCreatedBy').textContent = data.createByUser || ""N/A"";
                document.getElementById('modalExternalCode').textContent = data.externalCode || ""N/A"";
                document.getElementById('modalGender').textContent = data.gender || ""N/A"";
                document.getElementById('modalIsForeign').textContent = data.isForeign ? ""Yes"" : ""No"";
                document.getElementById('modalCroatianPIN').textContent = data.croatianPIN || ""N/A"";
                document.getElementById('modalCreatedAt').textContent = new Date(data.createdAt");
            WriteLiteral(@"Utc).toLocaleString();

                $('#detailsModal').modal('show');
            })
            .catch(error => {
                console.error(""Greška:"", error);
                alert(""Došlo je do pogreške pri dohvaćanju podataka."");
            });
    }

    function openPolicyDialog(partnerId) {
        document.getElementById('policyNumber').value = '';
        document.getElementById('policyAmount').value = '';
        document.getElementById('policyNumberError').style.display = 'none';
        document.getElementById('policyAmountError').style.display = 'none';

        window.selectedPartnerId = partnerId;
        $('#policyModal').modal('show');
    }

    function addNewPartnerToList(partner) {
        const existingRow = document.querySelector(`[data-partner-id='${partner.id}']`);

        if (existingRow) {
            // If the row already exists, update it
            const partnerName = (partner.totalPolicies > 5 || partner.totalAmount > 5000)
                ? ""*");
            WriteLiteral(@""" + partner.firstName + "" "" + partner.lastName
                : partner.firstName + "" "" + partner.lastName;

            existingRow.querySelector('td').textContent = partnerName;
            existingRow.querySelector('td:nth-child(2)').textContent = partner.partnerNumber;
            existingRow.querySelector('td:nth-child(3)').textContent = partner.partnerTypeId == 1 ? 'Personal' : 'Legal';
            existingRow.querySelector('td:nth-child(4)').textContent = new Date(partner.createdAtUtc).toISOString().slice(0, 19).replace('T', ' ');
        } else {
            // If the row doesn't exist, create it
            const newRow = document.createElement('tr');
            newRow.dataset.partnerId = partner.id;
            newRow.style.cursor = 'pointer';

            const partnerName = (partner.totalPolicies > 5 || partner.totalAmount > 5000)
                ? ""*"" + partner.firstName + "" "" + partner.lastName
                : partner.firstName + "" "" + partner.lastName;

            newRow.i");
            WriteLiteral(@"nnerHTML = `
                <td>${partnerName}</td>
                <td>${partner.partnerNumber}</td>
                <td>${partner.partnerTypeId == 1 ? 'Personal' : 'Legal'}</td>
                <td>${new Date(partner.createdAtUtc).toISOString().slice(0, 19).replace('T', ' ')}</td>
                <td>
                    <button class=""btn btn-info btn-sm"" onclick=""event.stopPropagation(); openPolicyDialog(${partner.id});"">Dodaj Policu</button>
                </td>
            `;

            const tableBody = document.getElementById('partnerListBody');
            tableBody.appendChild(newRow);
        }
    }

    function savePolicy() {
        const partnerId = window.selectedPartnerId;
        const policyNumber = document.getElementById('policyNumber').value;
        let policyAmount = document.getElementById('policyAmount').value;

        // Validate policy amount
        if (!policyAmount || policyAmount.trim() === '') {
            displayValidationErrors({
               ");
            WriteLiteral(@" PolicyAmount: [""Iznos police je obavezan.""]
            });
            return;
        }

        // Format policy amount
        policyAmount = policyAmount.replace(',', '.');
        policyAmount = parseFloat(policyAmount);

        if (isNaN(policyAmount) || policyAmount <= 0) {
            displayValidationErrors({
                PolicyAmount: [""Iznos mora biti veći od 0.""]
            });
            return;
        }

        const policyData = {
            partnerId: partnerId,
            policyNumber: policyNumber,
            policyAmount: policyAmount
        };

        fetch('/api/policies', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(policyData)
        })
            .then(response => {
                if (response.ok) {
                    refreshPartnersTable();
                    $('#policyModal').modal('hide');  // Hide the modal
                 ");
            WriteLiteral(@" 
                    return response.json();
                } else {
                    return response.json().then(data => {
                        displayValidationErrors(data.errors);
                        throw new Error(""Greška pri unosu police"");
                    });
                }
            })
           
    }
    function refreshPartnersTable() {
        // Osvježavanje može biti izvršeno tako da se ponovo učita stranica ili se ažurira kroz AJAX
        location.reload();  // Ponovno učitavanje stranice
    }

    function displayValidationErrors(errors) {
        // Sakrij sve prethodne greške
        document.getElementById('policyNumberError').style.display = 'none';
        document.getElementById('policyAmountError').style.display = 'none';

        // Provjeri greške i prikaži ih ispod odgovarajućih polja
        if (errors.PolicyNumber) {
            document.getElementById('policyNumberError').textContent = errors.PolicyNumber[0];  // Uzmi prvu grešku
      ");
            WriteLiteral(@"      document.getElementById('policyNumberError').style.display = 'block';
        }

        if (errors.PolicyAmount) {
            document.getElementById('policyAmountError').textContent = errors.PolicyAmount[0];  // Uzmi prvu grešku
            document.getElementById('policyAmountError').style.display = 'block';
        }
    }
</script>

<style>
    .new-partner {
        background-color: #f8f9fa; /* Light background for the new row */
        font-weight: bold; /* Bold text */
        transition: background-color 1s ease; /* Smooth transition */
    }

        .new-partner td {
            font-weight: bold; /* Make text inside <td> bold */
        }
</style>
");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<IEnumerable<InsuranceApp.Models.Partner>> Html { get; private set; }
    }
}
#pragma warning restore 1591
